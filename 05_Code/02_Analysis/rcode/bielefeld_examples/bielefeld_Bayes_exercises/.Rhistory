source('/Users/jossando/trabajo/rscripts/withinANOVA2.r')
source('/Users/jossando/trabajo/rscripts/withinANOVA1.r')
withinANOVA2("/Users/jossando/trabajo/FaceOff/","testauc.csv")
withinANOVA1("/Users/jossando/trabajo/FaceOff/","testauc.csv")
withinANOVA1("/Users/jossando/trabajo/FaceOff/","testauc.csv")
curaov <- read.csv(file=sprintf("%s%s","/Users/jossando/trabajo/FaceOff/","testauc.csv"), header=TRUE)
curaov
factname=names(curaov)[2]
depvarname=names(curaov)[3]
txtfile <- sprintf('%s%s_repmesAnova1_%s_table.txt',dirpath,format(Sys.time(),format="%d_%b_%Y_%H%M"),factname)
# name columns/variables
colnames(curaov) <- c("Subject","Factor1","DV")
# calculate number of cells (number of combinations between factor levels of each factor)
num_cells <- max(curaov[,2])
# columns as factors
curaov$Factor1 <- as.factor(curaov$Factor1)
curaov$Subject <- as.factor(curaov$Subject)
# results provide main effects and interaction effect,
# sphericity tests and greenhouse geisser corrections
curresults <- ezANOVA(curaov,dv=DV,wid=Subject,within = .(Factor1))
# 1st Main Effect
F1dfn <- as.character(curresults$ANOVA[[2]][1])
F1dfd <- as.character(curresults$ANOVA[[3]][1])
F1val <- as.character(round(curresults$ANOVA[[4]][1],2))
p1val <- as.character(curresults$ANOVA[[5]][1])
# p values
curp <- sapply(curresults[1],"[[",5)
curaov
factname
curaov <- read.csv(file=sprintf("%s%s","/Users/jossando/trabajo/FaceOff/","testauc.csv"), header=TRUE)
curaov
depvarname
# Non-nested multilevel model with varying slopes, varying intercepts (and opt-
source('~/trabajo/parkinson/paper_visualsearch/datacode/multilevel_norm_JO.R')
source('~/trabajo/parkinson/paper_visualsearch/datacode/multilevel_norm_JO.R')
checkConvergence = FALSE
if ( checkConvergence ) {
require(ggplot2)
require(plyr)
source("openGraphSaveGraph.R")
fdata <- read.csv( file=sprintf("/Users/jossando/trabajo/parkinson/DBSneglectPD/data/spentTime.csv"), sep=",", strip.white=T)
fdata$fNew <- fdata$fix2 - fdata$fRep
dat1 = ddply(fdata, .(PDID,group), summarize, mean=mean(NnewF))
dat1$group <- factor(dat1$group, levels(dat1$group)[c(2,1)]) # reorder for plots
# colorblind-friendly palette, based on http://jfly.iam.u-tokyo.ac.jp/color
# cbbPalette <- c("#000000","#009E73","#56B4E9","#F55E00")
cbbPalette <- c("#AAAAFF","#DD9999")
lCol <- c('#000000', '#000000')
openGraph(5 , 4)
ggplot(data=dat1, color=cbbPalette, mapping=aes(x=group, y=mean)) +
geom_jitter(mapping=aes(group=PDID, color=group), size=3, alpha=.7,
position=position_jitter(width=.08, height=0)) +
geom_boxplot(mapping=aes(fill=group),
width=.75, outlier.size=0, notch=F, outlier.colour="Red",
alpha=.5, cex=.5) + guides(fill=FALSE) +
scale_fill_manual(values=cbbPalette) + scale_color_manual(values=lCol) +
theme_bw(base_size=20) + theme(legend.position = "none") +
xlab("") + ylab("") + ggtitle("NnewF")# + ylim(c(0,130))  + ylab("time spent [s]")
#saveGraph(file=paste("timeSpentPlot", sep=""), type="pdf")
fdata
require(ggplot2)
require(plyr)
require(dichromat) # TODO? use this...
group  = "ALL" # "PD", "CO", or "ALL"
depVar = "bayes_RTf" # alphas_RTf/TP, VAMS_sad,symRepMean,SymRepPrct,OrdLastFix
fdata = read.csv( file=sprintf("data/%s_%s.csv", group, depVar))
# colorblind-friendly palette, based on http://jfly.iam.u-tokyo.ac.jp/color
cbbPalette <- c("#AAAAAA","#AAAAAA","#000000","#009E73","#56B4E9","#F55E00")
lCol <- '#555555'
ggplot(color=cbbPalette) +
geom_boxplot(data=fdata, width=.75, outlier.size=2.5, notch=TRUE,
mapping=aes(x=DBS, y=alpha1, fill=DBS)) +
scale_fill_manual(values=cbbPalette) +
guides(fill=FALSE) +
geom_line(data=fdata, mapping=aes(x=DBS, y=alpha1, group=PDID), color=lCol) +
theme(text=element_text(size=18)) +
ggtitle(paste(depVar, ", alpha1"))
#ggtitle("Search time intercepts (until target fixation)"
fileNameRoot="normalRepBANCOVA" # for constructing output filenames
group  <- "PD" # "PD", "CO", or "ALL"
depVar <- "bayes_RTf" # "alphas_RTf", "alphas_TP", "VAMS_sad", "symRepMean"
fdata  <- read.csv( file=sprintf("data/%s_%s.csv", group, depVar), sep=",", strip.white=T)
fdata
multilevel_bern
source('~/trabajo/parkinson/paper_visualsearch/datacode/multilevel_bern.R')
load("~/trabajo/p_notebooks/DDM_blindspot/2016-01-28_allDat.csv")
datFrame<-("~/trabajo/p_notebooks/DDM_blindspot/2016-01-28_allDat.csv")
datFrame
datFrame<-read.csv("~/trabajo/p_notebooks/DDM_blindspot/2016-01-28_allDat.csv")
datFrame
datFrame$trial
datFrame$stimLLoc
View(datFrame)
View(datFrame)
datFrame[1.]
datFrame[1,]
View(datFrame)
View(datFrame)
datFrame[1,1]
1000
result <- read.csv("/Users/jossando/trabajo/E283/analysis/eyedata/DataFile.csv",header=F, dec=".",sep=",", row.names=c("perf","rT","stim","subject","value","cue"))
result <- read.csv("/Users/jossando/trabajo/E283/analysis/eyedata/DataFile.csv",header=F, dec=".",sep=",", column.names=c("perf","rT","stim","subject","value","cue"))
result <- read.csv("/Users/jossando/trabajo/E283/analysis/eyedata/DataFile.csv",header=F, dec=".",sep=",")
result
result[1,]
result <- read.csv("/Users/jossando/trabajo/E283/analysis/eyedata/DataFile.csv",header=F, dec=".",sep=",",, col.names=c("perf","rT","stim","subject","value","cue"))
result[1,]
str (result)
result$cue <- factor (result$cue)
result$value <- factor (result$value)
result
result$cue
result$cue <- recode(result$cue,' "0"="nocue"; "1"="instruc"; "2"="noninstruc";', as.factor.result = TRUE)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
result$cue <- recode(result$cue,' "0"="nocue"; "1"="instruc"; "2"="noninstruc";', as.factor.result = TRUE)
result%cue
result%cue
result$cue
exit
sin(0)
sin(pi)
sin(pi/2)
4^8
3^8
2^8
256*3
32*9
3^5
243*16
knitr::opts_chunk$set(echo = TRUE)
source("/Users/jossando/trabajo/E299/07_Analyses/powerSim/powerSim.R")
source("/Users/jossando/trabajo/E299/07_Analyses/powerSim/02122018powerSim.R")
source("/Users/jossando/trabajo/E299/07_Analyses/powerSim/02122018powerSim.R")
load("/Users/jossando/trabajo/E299/07_Analyses/powerSim/02122018powerSim.R")
load("/Users/jossando/trabajo/E299/07_Analyses/powerSim/02122018powerSim.R")
knitr::opts_chunk$set(echo = TRUE)
auxdat   =  datFrame[datFrame$areOK,]
auxres   = ddply(auxdat,.(subjIndx,cond),summarize,RT=mean(trial_RT,na.rm=T))
knitr::opts_chunk$set(echo = TRUE)
require(plyr)
knitr::opts_chunk$set(echo = TRUE)
require(plyr)
auxdat   =  datFrame[datFrame$areOK,]
auxres   = ddply(auxdat,.(subjIndx,cond),summarize,RT=mean(trial_RT,na.rm=T))
Actualp  = pairwise.t.test(x=auxres$RT,g=auxres$cond,paired=TRUE)
Actualh  = Actualp$p.value<.05
openGraph(6,4)
knitr::opts_chunk$set(echo = TRUE)
require(plyr)
getPalette = colorRampPalette(brewer.pal(name="PuBuGn",n=9))
knitr::opts_chunk$set(echo = TRUE)
require(plyr)
library("RColorBrewer")
knitr::opts_chunk$set(echo = TRUE)
require(plyr)
library("RColorBrewer")
getPalette = colorRampPalette(brewer.pal(name="PuBuGn",n=9))
ggplot(data =pzwei)+
geom_raster(aes(x=nSubjects,y=nTrials,fill=Power))+
geom_text(aes(x=nSubjects,y=nTrials,label=sprintf("%2.0f",Power)),color="red",size=3)+
#scale_fill_brewer(type="seq",palette ="Blues")+
#scale_fill_continuous(low="black", high="pink", limits=c(.5,1))+
scale_fill_gradientn(colours=getPalette(100))+
scale_x_discrete(expand=c(0,0))+
scale_y_discrete(expand=c(0,0))
knitr::opts_chunk$set(echo = TRUE)
require(plyr)
library("RColorBrewer")
require(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
require(plyr)
library("RColorBrewer")
require(ggplot2)
getPalette = colorRampPalette(brewer.pal(name="PuBuGn",n=9))
ggplot(data =pzwei)+
geom_raster(aes(x=nSubjects,y=nTrials,fill=Power))+
geom_text(aes(x=nSubjects,y=nTrials,label=sprintf("%2.0f",Power)),color="red",size=3)+
#scale_fill_brewer(type="seq",palette ="Blues")+
#scale_fill_continuous(low="black", high="pink", limits=c(.5,1))+
scale_fill_gradientn(colours=getPalette(100))+
scale_x_discrete(expand=c(0,0))+
scale_y_discrete(expand=c(0,0))
knitr::opts_chunk$set(echo = TRUE)
require(plyr)
library("RColorBrewer")
require(ggplot2)
pequal = setNames(as.data.frame(as.table(rowSums(1*resultequal,dims=2)/nSims*100)),c("nSubjects","nTrials","Power"))
load("/Users/jossando/trabajo/E299/07_Analyses/powerSim/02122018powerSim.R")
knitr::opts_chunk$set(echo = TRUE)
require(plyr)
library("RColorBrewer")
require(ggplot2)
nSims
pequal = setNames(as.data.frame(as.table(rowSums(1*resultequal,dims=2)/nSims*100)),c("nSubjects","nTrials","Power"))
peins = setNames(as.data.frame(as.table(rowSums(1*resultein,dims=2)/nSims*100)),c("nSubjects","nTrials","Power"))
pzwei = setNames(as.data.frame(as.table(rowSums(1*resultzwei,dims=2)/nSims*100)),c("nSubjects","nTrials","Power"))
pdrei = setNames(as.data.frame(as.table(rowSums(1*resultdrei,dims=2)/nSims*100)),c("nSubjects","nTrials","Power"))
getPalette = colorRampPalette(brewer.pal(name="PuBuGn",n=9))
ggplot(data =pzwei)+
geom_raster(aes(x=nSubjects,y=nTrials,fill=Power))+
geom_text(aes(x=nSubjects,y=nTrials,label=sprintf("%2.0f",Power)),color="red",size=3)+
#scale_fill_brewer(type="seq",palette ="Blues")+
#scale_fill_continuous(low="black", high="pink", limits=c(.5,1))+
scale_fill_gradientn(colours=getPalette(100))+
scale_x_discrete(expand=c(0,0))+
scale_y_discrete(expand=c(0,0))
knitr::opts_chunk$set(echo = TRUE)
require(plyr)
library("RColorBrewer")
require(ggplot2)
auxdat   =  datFrame[datFrame$areOK,]
auxres   = ddply(auxdat,.(subjIndx,cond),summarize,RT=mean(trial_RT,na.rm=T))
Actualp  = pairwise.t.test(x=auxres$RT,g=auxres$cond,paired=TRUE)
Actualh  = Actualp$p.value<.05
nSims
pequal = setNames(as.data.frame(as.table(rowSums(1*resultequal,dims=2)/nSims*100)),c("nSubjects","nTrials","Power"))
peins = setNames(as.data.frame(as.table(rowSums(1*resultein,dims=2)/nSims*100)),c("nSubjects","nTrials","Power"))
pzwei = setNames(as.data.frame(as.table(rowSums(1*resultzwei,dims=2)/nSims*100)),c("nSubjects","nTrials","Power"))
pdrei = setNames(as.data.frame(as.table(rowSums(1*resultdrei,dims=2)/nSims*100)),c("nSubjects","nTrials","Power"))
getPalette = colorRampPalette(brewer.pal(name="PuBuGn",n=9))
ggplot(data =pzwei)+
geom_raster(aes(x=nSubjects,y=nTrials,fill=Power))+
geom_text(aes(x=nSubjects,y=nTrials,label=sprintf("%2.0f",Power)),color="red",size=3)+
#scale_fill_brewer(type="seq",palette ="Blues")+
#scale_fill_continuous(low="black", high="pink", limits=c(.5,1))+
scale_fill_gradientn(colours=getPalette(100))+
scale_x_discrete(expand=c(0,0))+
scale_y_discrete(expand=c(0,0))
# set path and require and source necessary functions and packages
path = "/Users/jossando/trabajo/E299/05_Code/02_Analysis/rcode/bielefeld_examples/bielefeld_Bayes_exercises/"
setwd(path)
source("openGraphSaveGraph.R") # utilities by Kruschke from http://doingbayesiandataanalysis.blogspot.de/
source("HDIofMCMC.R")
source("DBDA2E-utilities.R")
require(runjags)
require(ggplot2)
# Get the data
load(paste(path,"/dataE299_bielefeld.Rdata",sep=''))
# this time we take two conditions
dFc        = subset(dFc, cond==c("RaLuHu","RaLuHc"))
dFc$cond   = factor(dFc$cond )
cond       = as.numeric(dFc$cond)
dFc
dFc$cond   = factor(dFc$cond )
cond       = as.numeric(dFc$cond)
dFc$cond
cond
path = "/Users/jossando/trabajo/E299/05_Code/02_Analysis/rcode/bielefeld_examples/bielefeld_Bayes_exercises/"
setwd(path)
source("openGraphSaveGraph.R") # utilities by Kruschke from http://doingbayesiandataanalysis.blogspot.de/
source("HDIofMCMC.R")
source("DBDA2E-utilities.R")
require(runjags)
require(ggplot2)
# Get the data
load(paste(path,"/dataE299_bielefeld.Rdata",sep=''))
# this time we take two conditions
dFc        = subset(dFc, cond==c("RaLuHu","RaLuHc"))
dFc$cond   = factor(dFc$cond )
cond       = as.numeric(dFc$cond)
# data for RJAGS as a list
dataList = list(y          = dFc$mRT,
cond       = cond,
nCond      = length(unique(cond)),
nTotal     = length(dFc$mRT),
MPriormean = mean(dFc$mRT),
MPriorstd  = sd(dFc$mRT)*100,
SPriorL    = sd(dFc$mRT)/1000,
SPriorH    = sd(dFc$mRT)*1000)
# where do initialize the MCMC
initsList = list(mu    = c(mean(dFc$mRT[dFc$cond=="RaLuHu"]),mean(dFc$mRT[dFc$cond=="RaLuHc"])),
sigma =  c(sd(dFc$mRT[dFc$cond=="RaLuHu"]),sd(dFc$mRT[dFc$cond=="RaLuHc"])))
# model specification as a strin
modelString = 'model{
for ( i in 1:nTotal ) {
y[i] ~ dt( mu[cond[i]] , 1/sigma[cond[i]]^2 , nu )
}
for ( j in 1:nCond ) {
mu[j] ~ dnorm(MPriormean, 1/(MPriorstd)^2)
sigma[j] ~ dunif(SPriorL, SPriorH )
}
nu <- nuMinusOne+1
nuMinusOne ~ dexp(1/29)
}'
writeLines(modelString, con="model2.txt" )
# run the model
parameters    = c("mu","sigma","nu")
runjagsModel = run.jags("model2.txt",
data     = dataList,
adapt    = 1000,
monitor  = parameters,
n.chains = 4,
burnin   = 1000,
sample   = 10000,
inits    = initsList)
# check convergence, run the model again with adapt=1,burn=1,
# and different amount of samples and check again
codaSamples = as.mcmc.list(runjagsModel)
mcmcChain = as.matrix(as.mcmc(runjagsModel))
for ( parName in colnames(codaSamples[[1]]) ) {
diagMCMC( codaObject=codaSamples, parName=parName)
#   saveGraph(file=paste(path,"/figures/","convergence_",parName,sep=""), type="png")
}
# set path and require and source necessary functions and packages
path = "/Users/jossando/trabajo/E299/05_Code/02_Analysis/rcode/bielefeld_examples/bielefeld_Bayes_exercises/"
setwd(path)
source("openGraphSaveGraph.R") # utilities by Kruschke from http://doingbayesiandataanalysis.blogspot.de/
source("HDIofMCMC.R")
source("DBDA2E-utilities.R")
require(runjags)
require(ggplot2)
# Get the data
load(paste(path,"/dataE299_bielefeld.Rdata",sep=''))
# this time we take two conditions
dFc        = subset(dFc, cond==c("RaLuHu","RaLuHc"))
dFc$cond   = factor(dFc$cond )
cond       = as.numeric(dFc$cond)
# data for RJAGS as a list
dataList = list(y          = dFc$mRT,
cond       = cond,
nCond      = length(unique(cond)),
nTotal     = length(dFc$mRT),
MPriormean = mean(dFc$mRT),
MPriorstd  = sd(dFc$mRT)*100,
SPriorL    = sd(dFc$mRT)/1000,
SPriorH    = sd(dFc$mRT)*1000)
# where do initialize the MCMC
initsList = list(mu    = c(mean(dFc$mRT[dFc$cond=="RaLuHu"]),mean(dFc$mRT[dFc$cond=="RaLuHc"])),
sigma =  c(sd(dFc$mRT[dFc$cond=="RaLuHu"]),sd(dFc$mRT[dFc$cond=="RaLuHc"])))
# model specification as a strin
modelString = 'model{
for ( i in 1:nTotal ) {
y[i] ~ dt( mu[cond[i]] , 1/sigma[cond[i]]^2 , nu )
}
for ( j in 1:nCond ) {
mu[j] ~ dnorm(MPriormean, 1/(MPriorstd)^2)
sigma[j] ~ dunif(SPriorL, SPriorH )
}
nu <- nuMinusOne+1
nuMinusOne ~ dexp(1/29)
}'
writeLines(modelString, con="model2.txt" )
# run the model
parameters    = c("mu","sigma","nu")
runjagsModel = run.jags("model2.txt",
data     = dataList,
adapt    = 1,
monitor  = parameters,
n.chains = 4,
burnin   = 1,
sample   = 10000,
inits    = initsList)
# check convergence, run the model again with adapt=1,burn=1,
# and different amount of samples and check again
codaSamples = as.mcmc.list(runjagsModel)
mcmcChain = as.matrix(as.mcmc(runjagsModel))
for ( parName in colnames(codaSamples[[1]]) ) {
diagMCMC( codaObject=codaSamples, parName=parName)
#   saveGraph(file=paste(path,"/figures/","convergence_",parName,sep=""), type="png")
}
parameters    = c("mu","sigma","nu")
runjagsModel = run.jags("model2.txt",
data     = dataList,
adapt    = 1,
monitor  = parameters,
n.chains = 4,
burnin   = 1,
sample   = 100,
inits    = initsList)
# check convergence, run the model again with adapt=1,burn=1,
# and different amount of samples and check again
codaSamples = as.mcmc.list(runjagsModel)
mcmcChain = as.matrix(as.mcmc(runjagsModel))
for ( parName in colnames(codaSamples[[1]]) ) {
diagMCMC( codaObject=codaSamples, parName=parName)
#   saveGraph(file=paste(path,"/figures/","convergence_",parName,sep=""), type="png")
}
path = "/Users/jossando/trabajo/E299/05_Code/02_Analysis/rcode/bielefeld_examples/bielefeld_Bayes_exercises/"
setwd(path)
source("openGraphSaveGraph.R") # utilities by Kruschke from http://doingbayesiandataanalysis.blogspot.de/
source("HDIofMCMC.R")
source("DBDA2E-utilities.R")
require(runjags)
require(ggplot2)
# Get the data
load(paste(path,"/dataE299_bielefeld.Rdata",sep=''))
# this time we take two conditions
dFc        = subset(dFc, cond==c("RaLuHu","RaLuHc"))
dFc$cond   = factor(dFc$cond )
cond       = as.numeric(dFc$cond)
# data for RJAGS as a list
dataList = list(y          = dFc$mRT,
cond       = cond,
nCond      = length(unique(cond)),
nTotal     = length(dFc$mRT),
MPriormean = mean(dFc$mRT),
MPriorstd  = sd(dFc$mRT)*100,
SPriorL    = sd(dFc$mRT)/1000,
SPriorH    = sd(dFc$mRT)*1000)
# where do initialize the MCMC
initsList = list(mu    = c(mean(dFc$mRT[dFc$cond=="RaLuHu"]),mean(dFc$mRT[dFc$cond=="RaLuHc"])),
sigma =  c(sd(dFc$mRT[dFc$cond=="RaLuHu"]),sd(dFc$mRT[dFc$cond=="RaLuHc"])))
# model specification as a strin
modelString = 'model{
for ( i in 1:nTotal ) {
y[i] ~ dt( mu[cond[i]] , 1/sigma[cond[i]]^2 , nu )
}
for ( j in 1:nCond ) {
mu[j] ~ dnorm(MPriormean, 1/(MPriorstd)^2)
sigma[j] ~ dunif(SPriorL, SPriorH )
}
nu <- nuMinusOne+1
nuMinusOne ~ dexp(1/29)
}'
writeLines(modelString, con="model2.txt" )
# run the model
parameters    = c("mu","sigma","nu")
runjagsModel = run.jags("model2.txt",
data     = dataList,
adapt    = 1,
monitor  = parameters,
n.chains = 4,
burnin   = 1,
sample   = 100,
inits    = initsList)
# check convergence, run the model again with adapt=1,burn=1,
# and different amount of samples and check again
codaSamples = as.mcmc.list(runjagsModel)
mcmcChain = as.matrix(as.mcmc(runjagsModel))
for ( parName in colnames(codaSamples[[1]]) ) {
diagMCMC( codaObject=codaSamples, parName=parName)
#   saveGraph(file=paste(path,"/figures/","convergence_",parName,sep=""), type="png")
}
path = "/Users/jossando/trabajo/E299/05_Code/02_Analysis/rcode/bielefeld_examples/bielefeld_Bayes_exercises/"
setwd(path)
source("openGraphSaveGraph.R") # utilities by Kruschke from http://doingbayesiandataanalysis.blogspot.de/
source("HDIofMCMC.R")
source("DBDA2E-utilities.R")
require(runjags)
require(ggplot2)
# Get the data
load(paste(path,"/dataE299_bielefeld.Rdata",sep=''))
# this time we take two conditions
dFc        = subset(dFc, cond==c("RaLuHu","RaLuHc"))
dFc$cond   = factor(dFc$cond )
cond       = as.numeric(dFc$cond)
# data for RJAGS as a list
dataList = list(y          = dFc$mRT,
cond       = cond,
nCond      = length(unique(cond)),
nTotal     = length(dFc$mRT),
MPriormean = mean(dFc$mRT),
MPriorstd  = sd(dFc$mRT)*100,
SPriorL    = sd(dFc$mRT)/1000,
SPriorH    = sd(dFc$mRT)*1000)
# where do initialize the MCMC
initsList = list(mu    = c(mean(dFc$mRT[dFc$cond=="RaLuHu"]),mean(dFc$mRT[dFc$cond=="RaLuHc"])),
sigma =  c(sd(dFc$mRT[dFc$cond=="RaLuHu"]),sd(dFc$mRT[dFc$cond=="RaLuHc"])))
# model specification as a strin
modelString = 'model{
for ( i in 1:nTotal ) {
y[i] ~ dt( mu[cond[i]] , 1/sigma[cond[i]]^2 , nu )
}
for ( j in 1:nCond ) {
mu[j] ~ dnorm(MPriormean, 1/(MPriorstd)^2)
sigma[j] ~ dunif(SPriorL, SPriorH )
}
nu <- nuMinusOne+1
nuMinusOne ~ dexp(1/29)
}'
writeLines(modelString, con="model2.txt" )
# run the model
parameters    = c("mu","sigma","nu")
runjagsModel = run.jags("model2.txt",
data     = dataList,
adapt    = 1000,
monitor  = parameters,
n.chains = 4,
burnin   = 10000,
sample   = 100,
inits    = initsList)
# check convergence, run the model again with adapt=1,burn=1,
# and different amount of samples and check again
codaSamples = as.mcmc.list(runjagsModel)
mcmcChain = as.matrix(as.mcmc(runjagsModel))
for ( parName in colnames(codaSamples[[1]]) ) {
diagMCMC( codaObject=codaSamples, parName=parName)
#   saveGraph(file=paste(path,"/figures/","convergence_",parName,sep=""), type="png")
}
colnames(mcmcChain)
mcmcChain["mu[1]",]
mcmcChain[,"mu[1]"]
dFc
source('~/trabajo/E299/05_Code/02_Analysis/rcode/bielefeld_examples/continuous4.R')
source('~/trabajo/E299/05_Code/02_Analysis/rcode/bielefeld_examples/bielefeld_Bayes_exercises/continuous4.R')
source('~/trabajo/E299/05_Code/02_Analysis/rcode/bielefeld_examples/bielefeld_Bayes_exercises/continuous3.R')
effect_size = (mcmcChain[,"b1[2]"]-mcmcChain[,"b1[1]"])/mcmcChain[,"sigma"]
openGraph(4,3)
plotPost( effect_size, main="ES" ,
cenTend="mean", credMass=0.95 , ROPE = c(-.1,.1), compVal=0 )
openGraph(4,3)
plotPost( effect_size, main="ES" ,
cenTend="mean", credMass=0.95 , ROPE = c(-.1,.1), compVal=0 )
openGraph(4,3)
plotPost( mcmcChain[,"sigma"] , main="sigma" ,
cenTend="mean", credMass=0.95)
plotPost( mcmcChain[,"aSigma"] , main="asigma" ,
cenTend="mean", credMass=0.95)
saveGraph(file=paste(path,"/figures/","example3sigma",sep=""), type="png")
openGraph(4,3)
plotPost( mcmcChain[,"aSigma"] , main="asigma" ,
cenTend="mean", credMass=0.95)
